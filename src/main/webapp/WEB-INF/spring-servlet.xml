<!-- BEAN config for spring mvc -->
<!-- This is not reqired for spring boot(it auto creates for us!) -->

<!-- Declares that this is an XML file.-->
<?xml version="1.0" encoding="UTF-8"?> 

<!-- Declares this file as a Spring Bean Configuration file. -->
<!-- Defines namespaces for beans, context, and mvc, enabling Spring MVC features. -->
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xsi:schemalocation="  
        http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context  
        http://www.springframework.org/schema/context/spring-context.xsd  
        http://www.springframework.org/schema/mvc  
        http://www.springframework.org/schema/mvc/spring-mvc.xsd"        
        >
  
	<!-- Scans the specified package (com.example.controller) for Spring components like:
			@Controller (MVC controllers)
			@Service (Business logic)
			@Repository (Data layer)
			@Component (Other beans)
	 Without this, Spring MVC cannot detect controllers automatically! -->        
	<context:component-scan base-package="com.example.controller" /> <!-- HelloController.java -->

	<!-- Enables annotation-based configuration, allowing:
		@RequestMapping for handling HTTP requests
		@GetMapping, @PostMapping, etc.
		@ResponseBody for JSON responses
		@ExceptionHandler for exception handling
	Without this, you need to manually configure handlers!-->
	<mvc:annotation-driven />
	
	 <!-- View Resolver to map logical view names to JSP files -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>

</beans>

  